set lines=50 columns=84 "when you open a file, these are the window dimensions in characters
colorscheme peachpuff		"change this to the colorscheme you want to use


"Default Styling
set antialias			"when using gvim, this uses 'smoooth' fonts
set number				"enables line numbers
set relativenumber
set colorcolumn=80
set nowrap				"text does not wrap to a new line when restricted by window size
set tabstop=4 softtabstop=4 shiftwidth=4
set tw=0
set noerrorbells		"Vim never makes an annoying beeping noise when hitting the wrong key
					"try 'set errorbells' and see what I mean
set novisualbell			"blinks the screen when there is an error, like errorbells
					"use 'set novisualbell' if you don't want the screen flash
set title				"displays title
set encoding=utf-8		"uses UTF-8
set smarttab			"for info run ':help smarttab'
set smartcase			"for info run ':help smartcase'
set autoindent
syntax on


"Searches
"	(note: you can run a search in normal mode by typing a '/'
set ignorecase			"searches will ignore case
set showmatch
set hlsearch			"highlights all matches of a search'

"History
"	to undo, press 'u' in normal mode
"	to redo, press CTRL + 'r'
set history=100
set undolevels=100		"number of undos saved


" Indentation and Trailing Space Markers
set list listchars=tab:\|\ ,trail:·
	"Comment out the above if you don't want visual representations of indents
	"This line also displays trailing spaces with a '·'


" Convert spaces to tabs when reading a file
let fts = ['txt', 'md', 'text']					"if the file is not a word-type file
if index(fts, &filetype) != -1
    autocmd! bufreadpost * set noexpandtab | retab! 4

    " convert tabs to spaces before writing file
    autocmd! bufwritepre * set expandtab | retab! 4

    " convert spaces to tabs after writing file (to show guides again)
    autocmd! bufwritepost * set noexpandtab | retab! 4
endif


" mappings {
" maps the F3 key to file viewer
nnoremap <F3> :Explore<CR> 
" maps normal-mode <tab> key to switching windows
nnoremap <tab> <C-W>w
" normal-mode backspace to switch into other direction
nnoremap <bs> <C-W>W

nnoremap <space> :w<CR>:nohl<CR>
" }

" File explorer {
let g:netrw_winsize=40
let g:netrw_banner=0
" }

" folds {
function! Folds()
	set foldmethod=marker
	set foldmarker={,}
	set foldlevel=2
endfunction
" }

" word processor {
function! WP()
	setlocal norelativenumber
	setlocal number
	setlocal formatoptions=1
	setlocal formatprg=par
	setlocal linebreak
	setlocal wrap
	setlocal spellfile=~/vimstuff/spell/en.utf-8.add
	setlocal spell! syntax=off
	setlocal complete+=s
	colorscheme slate
endfunction
" }

" omni complete {
filetype plugin on
set omnifunc=syntaxcomplete#Complete
" inserts the longest common text of the matches, even only for one match
set completeopt=longest,menuone

" where to look for word completions
	"buffer, windows, other buffers, unloaded buffers, tags, includes/imports
	"kspell looks in dictionary when using spelling  
set complete=.,w,b,u,t,i,kspell 
" the following change the key mappings of omni complete
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
" inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"

" this function maps <Tab> to either insert a <Tab> if the current line is
	" only whitespace, or start/continue a CTRL-N completeion operation
function! CleverTab()
	if strpart( getline('.'), 0, col('.')-1 ) =~ '^\s*$'
		return "\<Tab>"
	else
		return "\<C-N>"
	endif
endfunction
inoremap <Tab> <C-R>=CleverTab()<CR>
"
